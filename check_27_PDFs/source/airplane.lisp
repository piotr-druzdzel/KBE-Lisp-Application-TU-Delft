(in-package :gdl-user)

;Establishing the pathname - relative to the source code pathname for the convenience' sake:
(defparameter *data-folder*
							(or (probe-file
								 (merge-pathnames "data/"
			
										(make-pathname 	:name nil
														:type nil
														:defaults excl:*source-pathname*	;; in future: (glisp:source-pathname)
										)
								 ) 
								)  
(error "Your data folder is not there. Please check the pathname or just save the 'airplane.lisp' file again - it is the GenWorks' bug.~%")
							)
)


(define-object airplane (base-object)

  :input-slots 
(
;Folder with data refers to the source pathname, therefore the external data should be in the SAME directory: 
   (data-folder    *data-folder*)  				;so as not to use too many global parameters
   (input-name     "input_Boeing_747.dat")	  	;data input file
   (cst-wing-name  "CST_wing.dat") 				;kink profile from MDO assignment - an averaged and experimental profile
   (cst-fin-name   "CST_fin.dat")  				;NACA0012 symmetrical profile
   (cst-tail-name  "CST_tail.dat") 				;horizontal tail profile based on an airfoil for the tip in MDO assignment
   (Q3D-file-name  "Q3D_START.m")  				;the Q3D input file that will be generated by the Q3D generator
   
;Merging pathnames:
;Merging the pathname of the data-folder (it is a source directory of this file but anyway) with the file name:
(CST-wing-path (merge-pathnames (the cst-wing-name) (the data-folder)))
(CST-fin-path  (merge-pathnames (the cst-fin-name)  (the data-folder)))
(CST-tail-path (merge-pathnames (the cst-tail-name) (the data-folder)))
(Q3D-file-path (merge-pathnames (the Q3D-file-name) (the data-folder)))
(dat-file-path (merge-pathnames (the input-name)    (the data-folder)))

; READ reads a single s-expression, returning a Lisp object. 'in' is a sort of handling message:
;with-open-file ensures the stream in stream-var is closed before the WITH-OPEN-FILE form returns.
;with-open-file helps to avoid dangling and unclosed data in the computer memmory in case of an error while the file is open 
;(thus it's a safe alternative to 'open'):
(CST-wing (with-open-file (in (the CST-wing-path))
						   (loop 
							for i = (read in nil) 
							while i collect i
						   )
				)
)

(CST-fin (with-open-file (in (the CST-fin-path))
							   (loop 
							    for i = (read in nil) 
								while i collect i
								)
				)
)

(CST-tail (with-open-file (in (the CST-tail-path))
							   (loop 
							    for i = (read in nil) 
								while i collect i
								)
				)
)

;The data from the external file read from the file which does not have to be prepared beforehand (no colons, brackets etc.)
(import-data (with-open-file (in (the dat-file-path))
		                    (loop 
							 for i = (read in nil) 
							 while i collect i
							)
			)
)




;parameters defining the wing:							
;reading input data and assignning them to the variables can be done in a following format: (nth 1 (the import-data))
;bear in mind that the line number plays a role though, it has to be consistent with the following convention:

;affecting wing shape, MAC and its position: 
(c-root-init                (nth 1 (the import-data))   :settable)
(c-root (if (or (< (/ (the fuselage_total_length) (the c-root-init)) 3.5 )
				(> (/ (the fuselage_total_length) (the c-root-init)) 5.5 )
			)
				(/ (the fuselage_total_length) 4.5)
				(the c-root-init)
		)
)


(total-span-init            (nth 3 (the import-data))   :settable)
(total-span (if (or (< (/ (the total-span-init) (the c-root)) 3.5 )
					(> (/ (the total-span-init) (the c-root)) 5.0 )
				)
					(/ (the fuselage_total_length) 1.2)
					(the total-span-init)
			)
)

(taper                      (nth 5 (the import-data))   :settable) 
(spanwise-position-kink     (nth 7 (the import-data))   :settable)
(sweep-init                 (nth 9 (the import-data))   :settable) ;sweep in [deg] here
(sweep (if  (or (< (the sweep-init) -50)
				(> (the sweep-init)  50)
			)
				35
				(the sweep-init)
		)
)

;affecting aft fuselage cone:
(landing_gear_height-init   (nth 11 (the import-data))  :settable) 
(landing_gear_height (if (or 	(< (the landing_gear_height-init) 1.0)
								(> (the landing_gear_height-init) 2.0)
						 )
							1.5
							(the landing_gear_height-init)
					 )
)

(fuselage_diameter-init     (nth 13 (the import-data))  :settable)
(fuselage_diameter (if (or 	(< (the fuselage_diameter-init) 1.25)
							(> (the fuselage_diameter-init) 7)
					  )
						3
						(the fuselage_diameter-init)
				  )
)

(divergence_angle-init      (nth 15 (the import-data))  :settable)
(divergence_angle (if (or 	(< (the divergence_angle-init) 15)
							(> (the divergence_angle-init) 25)
					  )
						20
						(the divergence_angle-init)
				  )
)

(rotation_angle-init        (nth 17 (the import-data))  :settable)
(rotation_angle-init2 (if (or 	(< (the rotation_angle-init) 0)
								(> (the rotation_angle-init) 15)
					  )
						10
						(the rotation_angle-init)
				  )
)
(rotation_angle (if (and (< (the slenderness_ratio_fuselage) 10)  (< (the rotation_angle-init) 10) )
					12
					(if (and (>= (the slenderness_ratio_fuselage) 10) (>= (the rotation_angle-init) 10) )
						8
						(the rotation_angle-init2)
					)		
				)
)


;affecting nose:
(slenderness_ratio_fuselage-init  (nth 19 (the import-data))  :settable)
(slenderness_ratio_fuselage (if (or (< (the slenderness_ratio_fuselage-init) 7)
									(> (the slenderness_ratio_fuselage-init) 15)
							)
								10
								(the slenderness_ratio_fuselage-init)
						)
)

(slenderness_ratio_nose-init     (nth 21 (the import-data))  :settable)
(slenderness_ratio_nose (if (or (< (the slenderness_ratio_nose-init) 1)
								(> (the slenderness_ratio_nose-init) (* 0.5 (the slenderness_ratio_fuselage)) )
							)
								1.5
								(the slenderness_ratio_nose-init)
						)
)


;affecting wing position:
(engines_podded_or_mounted 	(nth 23 (the import-data))  :settable) ;0 -> podded (0.25 * MAC position at 0.5 fuselage cylindrical length), 1 -> fuselage mounted (0.25 * MAC position at 0.6)
(wings_bottom_0_top_1       (nth 25 (the import-data))  :settable) ;0 -> bottom, 1 -> top config.

;there is no way that for V, C and H tail and 3 engines config all of them will be podded (no fin in the center), therefore overwriting to 'mounted':
(engines_podded_0_mounted_1 (if (and (eql (the tail-type) 3) (eql (the engine_number) 3))
									1
									(if (and (eql (the tail-type) 4) (eql (the engine_number) 3))
										1
										(if (and (eql (the tail-type) 5) (eql (the engine_number) 3))
											1
											(the engines_podded_or_mounted)
										)
									)
							)
)
										
										
;others:
(dihedral-init           (nth 27 (the import-data))  :settable)
(dihedral (if (or 	(< (the dihedral-init ) -20)
					(> (the dihedral-init )  20)
			  )
					 5
					(the dihedral-init )
		  )
)

(thickness-init             (nth 29 (the import-data))  :settable)
(thickness	 (if (or 	(< (/ (the c-root) (the thickness-init)) 10)
						(> (/ (the c-root) (the thickness-init)) 20)
				 )
					(* 0.075 (the c-root) )
					(the thickness-init )
		  )
)

;engines:
(engine_diameter-init       (nth 31 (the import-data))  :settable)
(engine_diameter (if (or 	(< (the engine_diameter-init) (* 0.2 (the fuselage_diameter) ) )
							(> (the engine_diameter-init) (* 0.6 (the fuselage_diameter) ) )
					 )
						(* 0.40 (the fuselage_diameter) )
						(the engine_diameter-init)
				 )
)

(engine_length-init         (nth 33 (the import-data))  :settable)
(engine_length (if (or 	(< (the engine_length-init) (* 1.5 (the engine_diameter)))
						(> (the engine_length-init) (* 2.5 (the engine_diameter)))
			  )
					(* 2.0 (the engine_diameter))
					(the engine_length-init)
		  )
)

(number_of_engines          (nth 35 (the import-data))  :settable)

;possible engine conf.: 2, 3 or 4 - if lower than 2 - yield 2, if higher than 4 - yield 4:
(engine_number (if (< (the number_of_engines) 2) 					 
				    2 						   			;when true
				    (if (> (the number_of_engines) 4)   ;when false
						4								;when true
						(the number_of_engines)			;when false
					)
				)
)


; TAIL stuff:

;0 conventional
;1 T - tail
;2 cruciform
;3 V - tail
;4 C - tail
;5 H - tail


(type-of-tail 				(nth 37 (the import-data)) 	:settable)

(tail-type (if (< (the type-of-tail) 0) 					 
				    0 						  		;when true
				    (if (> (the type-of-tail) 5)   	;when false
						5							;when true
						(the type-of-tail)			;when false
					)
				)
)

(cruciform 					(nth 39 (the import-data))	 :settable)

;planform of the Horizontal Tail (HT):
(tail-taper     			(nth 41 (the import-data))	 :settable)	;between 0.3 and 0.5
(tail-ar        			(nth 43 (the import-data))	 :settable)	;always ~5

(tail-dihedral-init 		(nth 45 (the import-data))	 :settable) ;the dihedral angle of the HT
(tail-dihedral 
				(if (eql (the tail-type) 3) 
										(* (/ 180 pi) (atan (/ (the S-v) (the S-h)) ) ) 	;true  - for the V-tail
										(the tail-dihedral-init)							;false - for any other type 
				)
)

;planform of the Vertical Tail (VT):
(staggering_VT 				(nth 47 (the import-data))  	:settable)

(stagger (/ (the staggering_VT) 100))

(fin-taper      			(nth 49 (the import-data))	:settable) ;0.3 for LOW, 0.6-0.8 for T-TAILs
(fin-ar         			(nth 51 (the import-data)) 	:settable) ;1.9 for LOW, 1.2-1.5 for T_TAILs
(fin-sweep      			(nth 53 (the import-data))  	:settable) ;regulations: 35-40 [deg]
(fin-thickness  			(nth 55 (the import-data)) 	:settable) ;arbitrary					 
				 
;wake hide/show:
(wing-wake-showing 			(nth 57 (the import-data))   :settable) ;0 -> hide, 1 -> show	
(tail-wake-showing 			(nth 59 (the import-data))   :settable) ;0 -> hide, 1 -> show	

;computations:
(Mach 						(nth 61 (the import-data))	:settable) ;[-]

(altitude-init 				(nth 63 (the import-data))	:settable) ;[m]
(altitude (if (or 	(< (the altitude-init) 0)
					(> (the altitude-init) 25000)
			  )
					 10500
					(the altitude-init)
		  )
)

(W_dg_lb					(nth 65 (the import-data))	:settable) ;[lb]
(Thrust_lb					(nth 67 (the import-data))	:settable) ;[lbf]

;Q3D:
(wing_AoA_deg 				(nth 69 (the import-data))	:settable) ;[deg]
(inviscid_0_viscous_1		(nth 71 (the import-data))	:settable) ;[-]		;should be actually always inviscid for this assignment

;X-foil:
(xfoil-spanwisely-init 		(nth 73 (the import-data))	:settable)	;[-] a value between 0 and 1.0
(xfoil-spanwisely (if (or 	(< (the xfoil-spanwisely-init) 0)
							(> (the xfoil-spanwisely-init) 1)
					  )
						 0.75
						(the xfoil-spanwisely-init)
				  )
)

(xfoil-cutting-showing		(nth 75 (the import-data))	:settable)	;0 -> hide, 1 -> show
(xfoil_wing_tail_fin		(nth 77 (the import-data))	:settable)	;0 -> wing, 1 -> tail, 2-> fin

)


   :computed-slots
(

; FUSEAGE lengths:

;fuselage total length
(fuselage_total_length (* (the slenderness_ratio_fuselage) (the fuselage_diameter)  ) )

;nose:
(fuselage_nose_length (* (the slenderness_ratio_nose) (the fuselage_diameter)) )

;cylinder
(fuselage_cylinder_length (- (the fuselage_total_length) (+ (the fuselage_nose_length) (the fuselage_aft_cone_length)) ))

;fuselage radius:
(fuselage_radius (/ (the fuselage_diameter) 2))


;WING 
;MAC length and its distance from root calculations can be found in: http://www.nasascale.org/howtos/mac-calculator.htm 

;Semi span is a half of the total one:
(semi-span (/ (the total-span) 2))

;c-tip is a function of c-root and taper:
(c-tip (* (the c-root) (the taper))) 
   
;sets the c-kink of the wing in order to match the top-level parameters:
(c-kink (- (the c-root) (* (* (the spanwise-position-kink) (the semi-span)) (tan (* (the sweep) (/ pi 180))))))


;INNER WING:

;MAC - inner - from NASA:
(MAC_inner (- (the c-root) (/ (* 2 (- (the c-root) (the c-kink)) (+ (* 1/2 (the c-root)) (the c-kink))) (* 3 (+ (the c-root) (the c-kink))))))

;inner wing length:
(inner_wing_length (* (the semi-span) (the spanwise-position-kink)))

;MAC_inner's distance from the root:
(MAC_inner_distance_from_root (/ (* 2 (the inner_wing_length) (+ (* 1/2 (the c-root)) (the c-kink))) (* 3 (+ (the c-root) (the c-kink)))) )


;OUTER WING:

;MAC - outer - from NASA:
(MAC_outer (- (the c-kink) (/ (* 2 (- (the c-kink) (the c-tip)) (+ (* 1/2 (the c-kink)) (the c-tip))) (* 3 (+ (the c-kink) (the c-tip))))))

;length of the outer wing
(outer_wing_length (- (the semi-span) (the inner_wing_length) ))

;MAC_outer's distance from the root:
(MAC_outer_distance_from_root (+ (the inner_wing_length) (the MAC_inner_distance_from_root) ))


;WING SURFACES:

;inner wing surface for the weighted average:
(inner_wing_surface (* (/ (+ (the c-kink) (the c-root)) 2) (* (the spanwise-position-kink) (the semi-span))))

;outer wing surface for the weighted average:
(outer_wing_surface (* (/ (+ (the c-tip) (the c-kink)) 2) (- (the semi-span) (* (the spanwise-position-kink) (the semi-span)))))

;total surface (planform of one wing):
(one_wing_surface  (+ (the inner_wing_surface) (the outer_wing_surface)))

;wing surface of TWO semi-wings:
(total_wing_surface (* 2 (the one_wing_surface)) )

;M A C  average length and position:

;MAC as a weighted average taking into account surfaces calculated before:
(c-MAC (/ (+ (* (the MAC_inner) (the inner_wing_surface)) 
		     (* (the MAC_outer) (the outer_wing_surface) ))
	      (the one_wing_surface)))

;MAC_average's position spanwise (also weighted by surfaces):
(MAC_distance_from_root (/ (+ (* (the MAC_inner_distance_from_root) (the inner_wing_surface) ) 
							  (* (the MAC_outer_distance_from_root) (the outer_wing_surface) ))
							(the one_wing_surface)))


						  
;rear tranlation of the MAC (for the positioning purpose):
(MAC_rear_inner (- (the c-root) (the MAC_inner)))
(MAC_rear_outer (* (the MAC_outer_distance_from_root) (tan (* (/ pi 180) (the sweep))) ))

(MAC_rear_transl (/ (+ (* (the inner_wing_surface) (the MAC_rear_inner)) 
					   (* (the outer_wing_surface) (the MAC_rear_outer)))
		            (the one_wing_surface))) 

	
					 
; 0.25  AND  POSITIONING:
					 
;0.25% of the length of the MAC_averaged:
(MAC_025 (* 0.25 (the c-MAC))) 

;distance between the nose of the root and the nose of the MAC (longitudinally only, not spanwise - thus by means of tan sweep etc.):
(distance_betw_root_nose_and_MAC_nose (* (the MAC_distance_from_root) 
										 (tan (* (/ pi 180) (the sweep))) 
									  ))

;distance between the root nose and the point of 0.25MAC:
(distance_betw_root_nose_and_025_MAC (+ (the distance_betw_root_nose_and_MAC_nose) (the MAC_025) ))



 
; W I N G  positioning  -  PODDED  or  FUSELAGE MOUNTED  engines

; 0 when podded           -> (0.25 * MAC position at 0.5 * fuselage cylindrical length)
; 1 when fuselage mounted -> (0.25 * MAC position at 0.6 * fuselage cylindrical length)

(wing_position (ecase (the engines_podded_0_mounted_1)   
			(0 (- (the distance_betw_root_nose_and_025_MAC) (/ (the c-root) 2) ))
			(1 (- (- (the distance_betw_root_nose_and_025_MAC) (/ (the c-root) 2)) (* 0.1 (the fuselage_cylinder_length)) ))
))   
   
; TOP  or  BOTTOM   configuration of the wing:

;boolean value
(boolean_top_or_bottom_wing (ecase (the wings_bottom_0_top_1) 
									(1 -1) 	  ;high wing		; -1 * any distance in :down direction yields sth like pointing to the :top direction
									(0  1))   ;low wing 
)



	
;AFT CONE - the rear part of the fuselage:

;aft cone length:
(fuselage_aft_cone_length (/ (the fuselage_diameter) (tan (* (the divergence_angle) (/ pi 180))) ))

;landing gear position (to be established by trial and error, suitably):
(distance_between_end_of_fuselage_and_LG (+ (the fuselage_aft_cone_length) (+ (* 0.50 (the fuselage_cylinder_length)) (the wing_position) ) ))

;max height of the fuselage aft cone:
(max_height_of_fuselage_aft_cone (* (the distance_between_end_of_fuselage_and_LG) (tan (* (the rotation_angle) (/ pi 180))) ))




; TAIL stuff:

;0 conventional
;1 T - tail
;2 cruciform
;3 V - tail
;4 C- tail
;5 H


;volume coefficients based upon the provided support package: 
(V-h (ecase (the engines_podded_0_mounted_1)
	  (0 
		1.059	;podded - averaged coeff. - yields slightly bigger HT see excel V_h statistical and sorted data
	  )
	  
	  (1 
		0.839	;mounted - averaged coeff. - yields slightly smaller HT see excel V_h statistical and sorted data
	  )
	 )
)

(V-v (ecase (the engines_podded_0_mounted_1)
		(0 
			0.096	;podded - averaged coeff. - yields slightly bigger VT see excel V_v statistical and sorted data
		)
		
		(1 
			0.086	;mounted - averaged coeff. - yields slightly smaller VT see excel V_v statistical and sorted data
		)
	 )
)


	
(l-h 
	(l-h-function 
			(the tail-sweep) 					;defined - constant throughout the iter
			(the fuselage_cylinder_length) 		;defined - constant throughout the iter
			(the fuselage_aft_cone_length)		;defined - constant throughout the iter
			
			(the total_wing_surface)			;defined - constant throughout the iter				;
			
			(the c-MAC)							;defined - constant throughout the iter
		    (the tail-ar) 						;defined - constant throughout the iter
			(the tail-taper) 					;defined - constant throughout the iter
			
			(the V-h) 							;defined - constant throughout the iter (statistics)

			(the engines_podded_0_mounted_1)	;defined - constant throughout the iter
			(the tail-type)						;defined - constant throughout the iter - for V-tail purpose - to make S-h bigger to avoid undersizing
			(the S-v)							;computed - input - for V-tail
			
			(the fin-sweep)						;defined - constant throughout the iter
			(the fin-span)						;computed - input - for T-tail and cruciform
			
			(the cruciform)						;defined - constant throughout the iter
	)
)	


(l-v 
	(l-v-function 
			(the fuselage_cylinder_length) 		;defined - constant throughout the iter
			(the fuselage_aft_cone_length)		;defined - constant throughout the iter
			
			(the total_wing_surface)			;defined - constant throughout the iter				;
			(the total-span)
			
			(the fin-ar)						;defined - constant throughout the iter
			(the fin-taper)						;defined - constant throughout the iter
			(the fin-sweep) 					;defined - constant throughout the iter
			
			(the V-v) 							;defined - constant throughout the iter (statistics)
			
			(the engines_podded_0_mounted_1)	;defined - constant throughout the iter
			
			(the tail-type)						;defined - constant throughout the iter
			
			(the tail-sweep)					;defined - constant throughout the iter
			
			; (the tail-semi-span)
			; (the tail-ar)
			; (the V-h)
			; (the l-h)
			; (the c-MAC)
			
	)
)


;the procedure for calculating S-h remains the same thoughout the calculations of different types !!!
(S-h (/ (* (the V-h) (the total_wing_surface) (the c-MAC))      (the l-h)))

;here, the H-tail and C-tail enforce changes, namely: H -> standard surface/4, C -> standard surface/2  
(S-v 
	(ecase (the tail-type)
		
		(0 ;conventional
			(/ (* (the V-v) (the total_wing_surface) (the total-span)) (the l-v))
		)
		(1 ;T-tail
			(/ (* (the V-v) (the total_wing_surface) (the total-span)) (the l-v))
		)
		(2 ;cruciform
			(/ (* (the V-v) (the total_wing_surface) (the total-span)) (the l-v))
		)			
		(3 ;V-tail
			(/ (* (the V-v) (the total_wing_surface) (the total-span)) (the l-v))
		)			
		(4 ;C-tail
			(/ (/ (* (the V-v) (the total_wing_surface) (the total-span)) (the l-v)) 2 ) ;CAREFUL !!! C-TAIL -> 2 smaller fins
		)
		(5 ;H-tail
			(/ (/ (* (the V-v) (the total_wing_surface) (the total-span)) (the l-v)) 4 ) ;CAREFUL !!! H-tail -> 4 smaller fins
		)
	)
)


;horizontal tail
(tail-sweep (+ 10 (the sweep) ))
(tail-thickness (* 0.99 (the thickness)))

(total-tail-span (sqrt (* (the S-h) (the tail-ar))) )
(tail-semi-span  (/ (the total-tail-span) 2) )

(tail-c-root (/ (the S-h) (* (the tail-semi-span) (+ 1 (the tail-taper))) ) ) ;correct, careful - onyl half of S_HT is included so we take tail-semi-span, NOT tail-total-span!
(tail-c-tip  (* (the tail-c-root) (the tail-taper) ) )

;MAC - HT - from NASA:
(MAC_HT (- (the tail-c-root) (/ (* 2 (- (the tail-c-root) (the tail-c-tip)) (+ (* 1/2 (the tail-c-root)) (the tail-c-tip))) 
								(* 3 (+ (the tail-c-root) (the tail-c-tip))) )))

;MAC - HT - distance from the root, spanwisely:
(MAC_HT_distance_from_center (/ (* 2 (the tail-semi-span) (+ (* 1/2 (the tail-c-root)) (the tail-c-tip))) 
								(* 3 (+ (the tail-c-root) (the tail-c-tip))) ) )


								
								
;veritical tail
(fin-span (sqrt (* (the S-v) (the fin-ar))))

(fin-c-root (/ (* 2 (the S-v)) (* (the fin-span) (+ 1 (the tail-taper))))) ;correct, see: notebook
(fin-c-tip  (* (the fin-c-root) (the fin-taper) ) )								

;MAC - VT - from NASA:
(MAC_VT (- (the fin-c-root) (/ (* 2 (- (the fin-c-root) (the fin-c-tip)) (+ (* 1/2 (the fin-c-root)) (the fin-c-tip))) 
								(* 3 (+ (the fin-c-root) (the fin-c-tip))) )))

;MAC - VT - distance from the root, spanwisely:
(MAC_VT_distance_from_center (/ (* 2 (the fin-span) (+ (* 1/2 (the fin-c-root)) (the fin-c-tip))) 
								(* 3 (+ (the fin-c-root) (the fin-c-tip))) ) )


			

	
(tail-root-center

(ecase (the tail-type)

(0	;conventional

(ecase (the engines_podded_0_mounted_1)
(0 
	(translate (the center)
										:top (* 0.40 (the max_height_of_fuselage_aft_cone))
										
										:rear (+ (* 0.50 (the fuselage_cylinder_length))
												 (*  1   (the fuselage_aft_cone_length))
												 (* -1.0 (the tail-c-root))
											  )    
	)
)

(1
	(translate (the center)
										:top (* 0.40 (the max_height_of_fuselage_aft_cone))
										
										:rear (+ (* 0.40 (the fuselage_cylinder_length))
												 (*  1   (the fuselage_aft_cone_length))
												 (* -1.0 (the tail-c-root))
												 
												 (* 0.1 (the fuselage_cylinder_length)) ;due to the fact that we translate from the center of fuselage
											  )    
	)
)

;end of ecase for podded of mounted:
)

;end for conventional case for tail
)




(1 ;T-tail

(ecase (the engines_podded_0_mounted_1)
(0 
	(translate (the fin-root-center)
									:top (* 0.90 (the fin-span))
										
									:rear (+ (*  1 (* (tan (* (/ pi 180) (the fin-sweep) ))  0.90 (the fin-span) ))	;see l-h-function: fin sweep is there already
											 (* -0.15 (the fin-c-root))
										  )     
	)
)

(1
	(translate (the fin-root-center)
									:top  (* 0.90 (the fin-span)) 
										
									:rear (+ (*  1 (* (tan (* (/ pi 180) (the fin-sweep) ))  0.90 (the fin-span) ))	;see l-h-function: fin sweep is there already
											 (* -0.15 (the fin-c-root))
										  )    
	)
)

;end of ecase for podded of mounted:
)

;end for T-tail case for tail
)


(2 ;cruciform

(ecase (the engines_podded_0_mounted_1)
(0 
	(translate (the fin-root-center)
										:top (* (the cruciform) (the fin-span))
										
										:rear (+ (* (the cruciform) (the fin-span) (tan (* (/ pi 180)  (the fin-sweep) )) )
												 (* -0.10 (the fin-c-root))
											  )     
	)
)

(1
	(translate (the fin-root-center)
										:top  (* (the cruciform) (the fin-span)) 
										
										:rear (+ (* (the cruciform) (the fin-span) (tan (* (/ pi 180)  (the fin-sweep) )) )
												 (* -0.10 (the fin-c-root))
											  )    
	)
)

;end of ecase for podded of mounted:
)

;end for cruciform case for tail
)


(3 ;V-tail

(ecase (the engines_podded_0_mounted_1)
(0 
	(translate (the center)
										:top (* 0.40 (the max_height_of_fuselage_aft_cone))
										
										:rear (+ (* 0.50 (the fuselage_cylinder_length))
												 (*  1   (the fuselage_aft_cone_length))
												 (* -1.0 (the tail-c-root))
											  )    
	)
)

(1
	(translate (the center)
										:top (* 0.40 (the max_height_of_fuselage_aft_cone))
										
										:rear (+ (* 0.40 (the fuselage_cylinder_length))
												 (*  1   (the fuselage_aft_cone_length))
												 (* -1.0 (the tail-c-root))
												 
												 (* 0.1 (the fuselage_cylinder_length)) ;due to the fact that we translate from the center of fuselage
											  )    
	)
)

;end of ecase for podded of mounted:
)

;end for V-tail case for tail
)


(4 ;C-tail

(ecase (the engines_podded_0_mounted_1)
(0 
	(translate (the center)
										:top (* 0.40 (the max_height_of_fuselage_aft_cone))
										
										:rear (+ (* 0.50 (the fuselage_cylinder_length))
												 (*  1   (the fuselage_aft_cone_length))
												 (* -1.0 (the tail-c-root))
											  )    
	)
)

(1
	(translate (the center)
										:top (* 0.40 (the max_height_of_fuselage_aft_cone))
										
										:rear (+ (* 0.40 (the fuselage_cylinder_length))
												 (*  1   (the fuselage_aft_cone_length))
												 (* -1.0 (the tail-c-root))
												 
												 (* 0.1 (the fuselage_cylinder_length)) ;due to the fact that we translate from the center of fuselage
											  )    
	)
)

;end of ecase for podded of mounted:
)

;end for C-tail case for tail
)


(5 ;H-tail

(ecase (the engines_podded_0_mounted_1)
(0 
	(translate (the center)
										:top (* 0.40 (the max_height_of_fuselage_aft_cone))
										
										:rear (+ (* 0.50 (the fuselage_cylinder_length))
												 (*  1   (the fuselage_aft_cone_length))
												 (* -1.0 (the tail-c-root))
											  )    
	)
)

(1
	(translate (the center)
										:top (* 0.40 (the max_height_of_fuselage_aft_cone))
										
										:rear (+ (* 0.40 (the fuselage_cylinder_length))
												 (*  1   (the fuselage_aft_cone_length))
												 (* -1.0 (the tail-c-root))
												 
												 (* 0.1 (the fuselage_cylinder_length)) ;due to the fact that we translate from the center of fuselage
											  )    
	)
)

;end of ecase for podded of mounted:
)

;end for H-tail case for tail
)


;end of ecase for tail type
)

;end of tail-root-center:
)













(fin-root-center 

(ecase (the tail-type)

(0	;conventional

(ecase (the engines_podded_0_mounted_1)
(0 
(translate (the center)
					:top (* 0.50 (the max_height_of_fuselage_aft_cone))
										
					:rear (+ (* 0.50 (the fuselage_cylinder_length))
							 (*  1 (the fuselage_aft_cone_length))
							 (* -0.75 (the fin-c-root))	;for conventional taper is smaller -> 0.25 MAC ends up closer to the wing -> fin root can be further aft
						  )
					:front (* (the fuselage_aft_cone_length) (the stagger)) 
)
)

(1
(translate (the center)
					:top (* 0.50 (the max_height_of_fuselage_aft_cone))
									
					:rear (+ (* 0.40 (the fuselage_cylinder_length))
							 (*  1 (the fuselage_aft_cone_length))
							 (* -0.75 (the fin-c-root))	;for conventional taper is smaller -> 0.25 MAC ends up closer to the wing -> fin root can be further aft
							 
							 (* 0.1 (the fuselage_cylinder_length)) ;due to the fact that we translate from the center of fuselage
						  )
					:front (* (the fuselage_aft_cone_length) (the stagger)) 
)
)

;end of engine ecase:
)

;end for conventional case for fin
)


(1	;T-tail

(ecase (the engines_podded_0_mounted_1)
(0 
(translate (the center)
					:top (* 0.50 (the max_height_of_fuselage_aft_cone))
										
					:rear (+ (* 0.50 (the fuselage_cylinder_length))
							 (*  1 (the fuselage_aft_cone_length))
							 (* -0.75 (the fin-c-root))	;for conventional taper is smaller -> 0.25 MAC ends up closer to the wing -> fin root can be further aft
						  )
					:front (* (the fuselage_aft_cone_length) (the stagger)) 
)
)

(1
(translate (the center)
					:top (* 0.50 (the max_height_of_fuselage_aft_cone))
									
					:rear (+ (* 0.40 (the fuselage_cylinder_length))
							 (*  1 (the fuselage_aft_cone_length))
							 (* -0.75 (the fin-c-root))	;for conventional taper is smaller -> 0.25 MAC ends up closer to the wing -> fin root can be further aft
							 
							 (* 0.1 (the fuselage_cylinder_length)) ;due to the fact that we translate from the center of fuselage
						  )
					:front (* (the fuselage_aft_cone_length) (the stagger)) 
)
)

;end of ecase:
)

;end of T-tail case for fin
)



(2	;cruciform

(ecase (the engines_podded_0_mounted_1)
(0 
(translate (the center)
						:top (* 0.50 (the max_height_of_fuselage_aft_cone))
										
						:rear (+ (* 0.50 (the fuselage_cylinder_length))
								 (*  1 (the fuselage_aft_cone_length))
								 (* -0.75 (the fin-c-root))			;for conventional taper is smaller -> 0.25 MAC ends up closer to the wing -> fin root can be further aft
							  )
						:front (* (the fuselage_aft_cone_length) (the stagger)) 
)
)

(1
(translate (the center)
						:top (* 0.50 (the max_height_of_fuselage_aft_cone))
									
						:rear (+ (* 0.40 (the fuselage_cylinder_length))
								 (*  1 (the fuselage_aft_cone_length))
								 (* -0.75 (the fin-c-root))			;for conventional taper is smaller -> 0.25 MAC ends up closer to the wing -> fin root can be further aft
								 
								 (* 0.1 (the fuselage_cylinder_length)) ;due to the fact that we translate from the center of fuselage
							  )
						:front (* (the fuselage_aft_cone_length) (the stagger)) 
)
)

;end of engine position ecase:
)

;end of cruciform case for fin
)


(3	;V-tail

0 ;in case of V-tail the Vertical Fin is  HIDDEN  !!!

;end of V-tail case for fin
)


(4	;C-tail

(ecase (the engines_podded_0_mounted_1)
(0 
(translate (the tail-root-center)
						;no vertical translation here - it is in the object itself
						
						:rear (- (* (the tail-semi-span) (tan (* (/ pi 180) (the tail-sweep))))
									(/ (the tail-c-root) 3)) ;experiment
								 
						:front (* (the fuselage_aft_cone_length) (the stagger)) 
)
)

(1
(translate (the tail-root-center)
						;no vertical translation here - it is in the object itself
									
						:rear (+ (- (* (the tail-semi-span) (tan (* (/ pi 180) (the tail-sweep))))
									(/ (the tail-c-root) 3)) ;experiment
									;0.1 is already taken into account !!!!!
							  )
						:front (* (the fuselage_aft_cone_length) (the stagger)) 
)
)

;end of engine position ecase:
)

;end of C-tail case for fin
)


(5	;H-tail

(ecase (the engines_podded_0_mounted_1)
(0 
(translate (the tail-root-center)
						;no vertical translation here - it is in the object itself
										
						:rear (- (* (the tail-semi-span) (tan (* (/ pi 180) (the tail-sweep))))
									(/ (the tail-c-root) 3)) ;experiment
								 
						:front (* (the fuselage_aft_cone_length) (the stagger)) 
)
)

(1
(translate (the tail-root-center)
						;no vertical translation here - it is in the object itself
									
						:rear (+ (- (* (the tail-semi-span) (tan (* (/ pi 180) (the tail-sweep))))
									(/ (the tail-c-root) 3)) ;experiment
									;0.1 is already taken into account !!!!!
							  )
						:front (* (the fuselage_aft_cone_length) (the stagger)) 
)
)

;end of engine position ecase:
)

;end of H-tail case for fin
)

;end of tail type ecase:
)
;end of fin-root-center:
)


;choosing one of two objects for the tail:
(tail-version (ecase (the tail-type)
									(0 'box-tail)
									(1 'box-tail)
									(2 'box-tail)
									(3 'box-tail)
									
									(4 'H_and_C-tail)
									(5 'H_and_C-tail)
			  )
)


;auxiliary fin rear translation for the 3rd engine position:
(3_rd_engine
			(+ 	(* 0.50  (the fuselage_cylinder_length))
				(*  1    (the fuselage_aft_cone_length))
				(* -0.75 (the fin-c-root))	;for conventional taper is smaller -> 0.25 MAC ends up closer to the wing -> fin root can be further aft
			)
)





; F L I G H T   C O N D I T I O N S:


(aircraft_speed (* (the Mach) (the sound_speed)))

(spec_heat_ratio 1.4) ; [-]
(gas_constant    287) ; J/(kg * K)

;sound speed - ideal gas assumption:
(sound_speed (sqrt (* (the temperature) 
					  (the spec_heat_ratio) 
					  (the gas_constant) 
					)
			 )
)

(T_0 288.15) ;[K]

;the temparature expressed in K - holds accurate up to 20 000 [m] - passenger airplanes:
(temperature 
	(if (<= (the altitude) 11000)
	;true:
		(-  (the T_0)
			(* 6.5 (/ (the altitude) 1000) )
		)
	;false:
		(if (<= (the altitude) 20000)
		;true:
			216.65
		;false:
			240.00
		)
	)
)

(temperature_deg_celsjus (- (the temperature) 273.15) )

;pressure with respect to altitude, the result in [Pa] - holds accurate up to 20 000 [m] - passenger airplanes:
(pressure 
	(if (<= (the altitude) 11000)
	;true:
		(*  101300
			(expt (+ 1.0 (* (/ -0.0065 288.15) (the altitude) ) )
				  (/ (* -9.81 0.02896) (* 8.314 -0.0065)) 
			)
		)
	;false:
		(if (<= (the altitude) 20000)
		;true:
			(*  22632
				(expt 2.7183
					  (/ (* -9.81 0.02896 (- (the altitude) 11000) ) (* 8.314 288.15) )  
				)
			)
		;false:
			2549
		)
	)
)

;density in [kg/m^3] - holds accurate up to 20 000 [m] - passenger airplanes:
(density (/ (the pressure)
			(* 287 (the temperature))
		 )
)

;viscosity, Sutherland's law:

(C_1 (* 1.458 (expt 10 -6) ))
(C_2 110.4)

(viscosity (/ (* (the C_1) (expt (the temperature) 1.5) )
			  (+ (the temperature) (the C_2))
		   )
)
 
;Reynold's number:
(reynolds (/ (* (the density) (the aircraft_speed) (the c-MAC)) 
			 (the viscosity)
		  )
)




; Q 3 D   G E N E R A T I O N:

(W_dg_kg (* 0.45359237 (the W_dg_lb) ))

;calculating the lift coefficient:
(C_L (/ (* (the W_dg_kg) 9.81) 
		(* 0.5 
		   (the density)
		   (expt (the aircraft_speed) 2)
		   (the total_wing_surface)
		)
	 )
)

;wing planform geometry:

;root section:
(x_root 0)
(y_root 0)
(z_root 0)

;kink section:
(x_kink (* (* (the semi-span) 
			  (the spanwise-position-kink) )
		   (tan (* (/ pi 180) (the sweep) ) )
		)
) 
(y_kink (* (* (the semi-span) 
			  (the spanwise-position-kink) )
		   (cos (* (/ pi 180) (the dihedral) ) )
		)
)		   
(z_kink (* (* (the semi-span) 
			  (the spanwise-position-kink) )
		   (sin (* (/ pi 180) (the dihedral) ) )
		)
)		   

;tip section:
(x_tip 	(* (the semi-span)
		   (tan (* (/ pi 180) (the sweep) ) ) 
		)
)
(y_tip 	(* (the semi-span)
		   (cos (* (/ pi 180) (the dihedral) ) ) 
		)
)
(z_tip 	(* (the semi-span)
		   (sin (* (/ pi 180) (the dihedral) ) ) 
		)
)

;upper cst coefficients:
	(cst-1  (nth 0  (the CST-wing) )) 
	(cst-2  (nth 1  (the CST-wing) )) 
	(cst-3  (nth 2  (the CST-wing) )) 
	(cst-4  (nth 3  (the CST-wing) ))
    (cst-5  (nth 4  (the CST-wing) )) 
	(cst-6  (nth 5  (the CST-wing) )) 

;lower cst coefficients:
	(cst-7  (nth 6  (the CST-wing) )) 
	(cst-8  (nth 7  (the CST-wing) ))
    (cst-9  (nth 8  (the CST-wing) )) 
	(cst-10 (nth 9  (the CST-wing) )) 
	(cst-11 (nth 10 (the CST-wing) )) 
	(cst-12 (nth 11 (the CST-wing) ))

;the function for generating the Q3D input file:   
(Generate-Q3D-input

		(Q3D-function 
;data for the wing planform geometry, note that no wing-twist is included in KBE assignment, therefore its value will be 0:
					(the x_root)
					(the y_root)
					(the z_root)
					
					(the x_kink)
					(the y_kink)
					(the z_kink)
					
					(the x_tip)
					(the y_tip)
					(the z_tip)
					
				(the c-root) 
				(the c-kink) 
				(the c-tip) 
		
;Wing incidence angle (degree)
				(the wing_AoA_deg)
					
;Airfoil coefficients input matrix - convention: upper -> lower surface:
				(the cst-1)
				(the cst-2)
				(the cst-3)
				(the cst-4)
				(the cst-5)
				(the cst-6)
				
				(the cst-7)
				(the cst-8)
				(the cst-9)
				(the cst-10)
				(the cst-11)
				(the cst-12)
				
;Spanwise location of the airfoil sections:
				(the spanwise-position-kink) 

;Viscous(1) vs inviscid(0):
				(the inviscid_0_viscous_1)

;Flight Conditions:				
				(the aircraft_speed)
				(the density)
				(the altitude)
				(the reynolds)
				(the Mach)   
				(the C_L)

;For saving to the right location:
				(the Q3D-file-path)
		)
)


;Slot for enerating IGES model:
(Generate-IGES-model 
					(the (iges-out-generation!)) 
)






; W A R N I N G S:

;engine warning:
(engine-warning-showing
						(if (or
								(< (the number_of_engines) 2)
								(> (the number_of_engines) 4)
							)
							
							1	;true  -> show warning
							0	;false -> hide warning
						)
)

;tail warning:
(tail-warning-showing
						(if (or
								(< (the type-of-tail) 0)
								(> (the type-of-tail) 5)
							)
							
							1	;true  -> show warning
							0	;false -> hide warning
						)
)

;xfoil-spanwisely warning:
(xfoil-spanwisely-warning-showing
						(if (or
								(< (the xfoil-spanwisely-init) 0)
								(> (the xfoil-spanwisely-init) 1)
							)
							
							1	;true  -> show warning
							0	;false -> hide warning
						)
)

;altitude warning:
(altitude-warning-showing
						(if (or
								(< (the altitude-init) 0)
								(> (the altitude-init) 25000)
							)
							
							1	;true  -> show warning
							0	;false -> hide warning
						)
)

;viscous warning:
(viscous-warning-showing
						(if (eql (the inviscid_0_viscous_1) 1)
							
							1	;true  -> show warning
							0	;false -> hide warning
						)
)

;divergence-angle warning:
(divergence-angle-warning-showing
						(if (or
								(< (the divergence_angle-init) 15)
								(> (the divergence_angle-init) 25)
							)
							
							1	;true  -> show warning
							0	;false -> hide warning
						)
)

;divergence-angle warning:
(rotation_angle-init-warning-showing
						(if (or
								(< (the rotation_angle-init) 0)
								(> (the rotation_angle-init) 15)
							)
							
							1	;true  -> show warning
							0	;false -> hide warning
						)
)




; --- more warnings ---

;engine_diameter warning:
(engine_diameter-init-warning-showing
						(if (or
								(< (the engine_diameter-init) (* 0.2 (the fuselage_diameter) ) )
								(> (the engine_diameter-init) (* 0.6 (the fuselage_diameter) ) )
							)
							
							1	;true  -> show warning
							0	;false -> hide warning
						)
)

;dihedral warning:
(dihedral-init-warning-showing
						(if (or
								(< (the dihedral-init ) -20)
								(> (the dihedral-init )  20)
							)
							
							1	;true  -> show warning
							0	;false -> hide warning
						)
)

;slenderness ratio nose warning:
(slenderness-ratio-nose-init-warning-showing
						(if (or
								(< (the slenderness_ratio_nose-init) 1)
								(> (the slenderness_ratio_nose-init) (* 0.5 (the slenderness_ratio_fuselage)) )
							)
							
							1	;true  -> show warning
							0	;false -> hide warning
						)
)

;wing thickness warning:
(thickness-init-warning-showing
						(if (or
								(< (/ (the c-root) (the thickness-init)) 10)
								(> (/ (the c-root) (the thickness-init)) 20)
							)
							
							1	;true  -> show warning
							0	;false -> hide warning
						)
)

;wing sweep warning:
(sweep-warning-showing
						(if (or
								(< (the sweep-init) -40)
								(> (the sweep-init)  40)
							)
							
							1	;true  -> show warning
							0	;false -> hide warning
						)
)

;slenderness_ratio_fuselage warning:
(slenderness_ratio_fuselage-warning-showing
						(if (or
								(< (the slenderness_ratio_fuselage-init) 7)
								(> (the slenderness_ratio_fuselage-init) 15)
							)
							
							1	;true  -> show warning
							0	;false -> hide warning
						)
)

;fuselage_diameter-init warning:
(fuselage_diameter-init-warning-showing
						(if (or
								(< (the fuselage_diameter-init) 0.5)
								(> (the fuselage_diameter-init) 10)
							)
							
							1	;true  -> show warning
							0	;false -> hide warning
						)
)

;engine_length-init warning:
(engine_length-init-warning-showing
						(if (or
								(< (the engine_length-init) (* 1.5 (the engine_diameter)))
								(> (the engine_length-init) (* 2.5 (the engine_diameter)))
							)
							
							1	;true  -> show warning
							0	;false -> hide warning
						)
)

;landing_gear_height warning:
(landing_gear_height-warning-showing
						(if (or
								(< (the landing_gear_height-init) 1.0)
								(> (the landing_gear_height-init) 2.0)
							)
							
							1	;true  -> show warning
							0	;false -> hide warning
						)
)

;c-root warning:
(c-root-warning-showing
						(if (or
								(< (/ (the fuselage_total_length) (the c-root-init)) 3.5 )
								(> (/ (the fuselage_total_length) (the c-root-init)) 5.5 )
							)
							
							1	;true  -> show warning
							0	;false -> hide warning
						)
)

;wing-span warning:
(wing-span-warning-showing
						(if (or
								(< (/ (the total-span-init) (the c-root)) 3.5 )
								(> (/ (the total-span-init) (the c-root)) 5.0 )
							)
							
							1	;true  -> show warning
							0	;false -> hide warning
						)
)

;wing sweep over 50 warning:
(sweep-over-50-warning-showing
						(if (or
								(< (the sweep-init) -50)
								(> (the sweep-init)  50)
							)
							
							1	;true  -> show warning
							0	;false -> hide warning
						)
)

;fuselage slenderness ratio over 12 or below 8 - with respect to fin position - warning:
(fuselage-slendernessratio-over-12-or-below-8-warning-showing
						(if (or
								(< (the slenderness_ratio_fuselage) 8)
								(> (the slenderness_ratio_fuselage) 12)
							)
							
							1	;true  -> show warning
							0	;false -> hide warning
						)
)

;aft-cone-warning:
(aft-cone-warning-showing
						(if (or
								(and (<  (the slenderness_ratio_fuselage) 10) (<  (the rotation_angle-init) 10) )
								(and (>= (the slenderness_ratio_fuselage) 10) (>= (the rotation_angle-init) 10) )
							)
							
							1	;true  -> show warning
							0	;false -> hide warning
						)
)

;mach-one-warning:
(mach-one-warning-showing
						(if (eql (the Mach) 1)
							
							1	;true  -> show warning
							0	;false -> hide warning
						)
)

;3-engines-warning:
(3-engines-warning-showing
						(if 
							(or (and (eql (the tail-type) 3) (eql (the engine_number) 3))
								(or (and (eql (the tail-type) 4) (eql (the engine_number) 3))
									(or (and (eql (the tail-type) 5) (eql (the engine_number) 3)) )
								)
							)
								1	;true  -> show warning
								0	;false -> hide warning
						)
)





;---------------------------------------------------------------------------------------------------------------------------------------------------
;end of computed slots					
)


 :functions 
(
	(iges-out-generation! ()
    
		(with-format (iges "C:/Users/Simon/Desktop/check_27_PDFs/source/data/Airplane_IGES_Model.igs")
			(write-the  cad-output-tree)
		)
	)
)


  :hidden-objects
(
;pierw - przypisanie wspolczynnikow - odpalenie generatora cst - otrzymanie output-points:
	(wing-coordinates :type 'CST_generator 
					  :CST (the CST-wing))
				 
	(fin-coordinates  :type 'CST_generator 
					  :CST (the CST-fin))
	
	(tail-coordinates :type 'CST_generator 
					  :CST (the CST-tail))	

					 
;trzec					 
	(wing-profile 		:type 'profile-curve
						:points (the wing-coordinates output-points))	; :points is enforced due to syntax of 'profile-curve'
	
	(fin-profile 		:type 'profile-curve
						:points (the fin-coordinates output-points))
				 
	(tail-profile 		:type 'profile-curve
						:points (the tail-coordinates output-points))
)

   
   :objects
(
;right and left wings together obtained by means of a mirror image (see: primi-plane):
   (wing-assembly 
		  :type 'box-wings
	      
		  :c-tip    	 		  (the c-tip)
	      :c-kink   	 		  (the c-kink)
	      :c-root   	 		  (the c-root)
	      :sweep    	 		  (the sweep)
	      :semi-span     	 	  (the semi-span)
	      :MAC_distance_from_root (the MAC_distance_from_root)
	      :c-MAC    	 		  (the c-MAC)
	      :MAC_rear_transl 	 	  (the MAC_rear_transl)
	      :spanwise-position-kink (the spanwise-position-kink)

;translating the wing up or down depends on the boolean value (when 1 -> translation down to low wing -conf., when -1 -> up to high wing conf. 
;it can be explained as (-1 * :down results in something like :up))
	      :root-center (translate (the center)
				      :down (* (the boolean_top_or_bottom_wing) 0.6 (the mid-fuselage radius))
				      :front (the  wing_position))
					  
	      :thickness 			(the thickness)
	      :dihedral 			(the dihedral)
	      :wing-profile 		(the wing-profile)
		  
		  :display-controls (list :color :green)
	)
	
	
    (nose-fuselage
	 
	 :type 'fuselage-object
	 :d (the fuselage_diameter)
	 :l (the fuselage_cylinder_length)
	 :display-controls  (list :color :purple
							  :line-thickness 0.1
						)
	 
	 :cross-section-percents (list 
								  (/ (* -100 (the slenderness_ratio_nose) (the fuselage_diameter)) (the fuselage_cylinder_length)) 0
								  (/ (* -75  (the slenderness_ratio_nose) (the fuselage_diameter)) (the fuselage_cylinder_length)) 75
								  (/ (* -10  (the slenderness_ratio_nose) (the fuselage_diameter)) (the fuselage_cylinder_length)) 99
								   0 100
							 )
							 
	 :cross-section-clearance ( 
				list 0
					 0
					 0
					 0
					 0
					 0
					 0
					 0					
					 0
					 0
					 0
							  )
	 )
	
   (mid-fuselage 
   
		 :type 'fuselage-object
	     :d (the fuselage_diameter)
	     :l (the fuselage_cylinder_length)
	     :display-controls  (list :color :black 
								 :line-thickness 0.1
							)

	     :cross-section-percents 
						(list    0 100 
							    10 100
							    20 100
							    30 100
		    					40 100
								50 100
								60 100
								70 100
								80 100
								90 100
							   100 100
						)
						
	     :cross-section-clearance 
		          ( list 0 
					     0
					     0
					     0
					     0
					     0
					     0
					     0
						 0
						 0
						 0
				  )
	)

   (aft-fuselage 
   
		 :type 'fuselage-object
	     :d (the fuselage_diameter)
		 :l (the fuselage_cylinder_length)
	     :display-controls  (list :color :brown
								 :line-thickness 0.1
							)
	     :cross-section-percents 
						(list 
						    100 100
							(+ 100 (/ (* 100 (the fuselage_aft_cone_length)) (the fuselage_cylinder_length)) ) 20
						)

	     :cross-section-clearance 
		          ( list 
						  0
						 (* 0.7 (* (the fuselage_diameter) (/ (* (the max_height_of_fuselage_aft_cone)) 				; super-empirical-gypsy-formula
															  (+ (the fuselage_diameter) (the landing_gear_height)) 
														   ) 
								)
						)
				  )
	)

   
   (engine-assembly 
   
		:type 'engines
		
		:engine_diameter 	(the engine_diameter)
		:sweep 				(the sweep)
		:c-root 			(the c-root)
		:engine_length 		(the engine_length)
		:semi-span 			(the semi-span)
		:thickness 			(the thickness)
		:dihedral 			(the dihedral)
		
		:boolean_top_or_bottom_wing (the boolean_top_or_bottom_wing) 
		:engines_podded_0_mounted_1 (the engines_podded_0_mounted_1)
		
		:fuselage_cylinder_length (the fuselage_cylinder_length)
		:fuselage_aft_cone_length (the fuselage_aft_cone_length)
		
		:fuselage_radius 	(the fuselage_radius)
		:engine_number 		(the engine_number)
				
		:wing_position 		(the wing_position)
		
		:3_rd_engine  		(the 3_rd_engine)

	)



   (tail-assembly 
   
		  :type (the tail-version)
		  
		  :tail-type (the tail-type)
	         
		  :tail-root-center 		(the tail-root-center)
	      :fin-root-center  (the fin-root-center)
	      
		  :tail-c-root 		 (the tail-c-root)
	      :tail-c-tip  		 (the tail-c-tip)
	      :tail-semi-span    (the tail-semi-span)
		  :tail-thickness 	 (the tail-thickness)
	      :tail-dihedral  	 (the tail-dihedral)
	      :tail-sweep 	 	 (the tail-sweep)
		  
		  :fin-sweep 	 (the fin-sweep)
	      :fin-span 	 (the fin-span)
	      :fin-c-root 	 (the fin-c-root)
	      :fin-c-tip 	 (the fin-c-tip)
	      :fin-thickness (the fin-thickness)
	     
		  :fin-profile	 (the fin-profile)
	      :tail-profile	 (the tail-profile)
		 
		  :MAC_HT_distance_from_center (the MAC_HT_distance_from_center)
	      :MAC_VT_distance_from_center (the MAC_VT_distance_from_center)
	      
		  :MAC_HT (the MAC_HT)
	      :MAC_VT (the MAC_VT)
		  
		  :display-controls (list :color :pink)
		  
	)
	
	
;----------------------------------------------------------------------------------------------------------------------------------------------
	
	(wing-wake_demonstration
	
		:hidden? (ecase (the wing-wake-showing)
												(0 t)
												(1 nil)
				 )

		:type 'wing-wake
		
		:fuselage_total_length 		(the fuselage_total_length)
		:fuselage_radius 			(the fuselage_radius)
		:wing_position 				(the wing_position)
		:boolean_top_or_bottom_wing (the boolean_top_or_bottom_wing)

		:c-root 					(the c-root)
		:c-tip 						(the c-tip)
		:sweep 						(the sweep)
		:semi-span 					(the semi-span)
		:dihedral 					(the dihedral)
		:spanwise-position-kink 	(the spanwise-position-kink)
	
	)
	(tail-wake_demonstration
	
		:hidden? (ecase (the tail-wake-showing)
												(0 t)
												(1 nil)
				 )

		:type 'tail-wake
		
		:tail-root-center 	(the tail-root-center)

		:tail-c-root 		(the tail-c-root)
		:tail-c-tip 		(the tail-c-tip)

		:tail-sweep 		(the tail-sweep)
		:tail-semi-span 	(the tail-semi-span)
		:tail-dihedral 		(the tail-dihedral)
	
	)


	(xfoil-wing-cutting

		:type 'cutting-wing-x-foil

		:hidden? (ecase (the xfoil-cutting-showing)
												(0 t)
												(1 nil)
				 )
	
		:fuselage_radius				(the fuselage_radius)
		:wing_position					(the wing_position)
		:boolean_top_or_bottom_wing		(the boolean_top_or_bottom_wing)

		:c-root							(the c-root)
		:c-tip							(the c-tip)
		:sweep							(the sweep)
		:semi-span						(the semi-span)
		:dihedral						(the dihedral)

		:thickness						(the thickness)
		:xfoil-spanwisely 				(the xfoil-spanwisely)
		
		:spanwise-position-kink 		(the spanwise-position-kink)		
		
		:loft-outer 					(the wing-assembly 	(:wings 0) loft-outer)
		:loft-inner 					(the wing-assembly 	(:wings 0) loft-inner)
	
	)
	
	(xfoil-tail-cutting

		:type 'cutting-tail-x-foil

		:hidden? (ecase (the xfoil-cutting-showing)
												(0 t)
												(1 nil)
				 )
	
		:tail-root-center			(the tail-root-center)

		:tail-c-root				(the tail-c-root)
		:tail-c-tip					(the tail-c-tip) 

		:tail-sweep					(the tail-sweep) 
		:tail-semi-span				(the tail-semi-span)
		:tail-dihedral 				(the tail-dihedral)
		:tail-thickness				(the tail-thickness)

		:xfoil-tail-spanwisely 		(the xfoil-spanwisely)
		
		:loft-tail					(the tail-assembly (:wings 0) tail-loft)
		
	)
	

	(xfoil-fin-cutting

		:type 'cutting-fin-x-foil

		:hidden? (if 
						(or (eql (the tail-type) 3) 	
							(ecase (the xfoil-cutting-showing)
										(0 t)
										(1 nil)
							) 
						)
					t
					nil
				 )												 
	
		:fin-root-center			(the fin-root-center)

		:fin-c-root					(the fin-c-root)
		:fin-c-tip					(the fin-c-tip) 

		:fin-sweep					(the fin-sweep) 
		:fin-span					(the fin-span)
		
		:fin-thickness				(the fin-thickness)

		:xfoil-fin-spanwisely 		(the xfoil-spanwisely)
		
		:loft-fin 					(if (or (eql (the tail-type) 4) (eql (the tail-type) 5))
		
										(the tail-assembly (:fin 1) fin-loft)
										(the tail-assembly fin fin-loft)
									)
		
		:fuselage_radius			(the fuselage_radius)
		:tail-type					(the tail-type)
		
		:tail-semi-span			(the tail-semi-span)
		:tail-dihedral			(the tail-dihedral)
		:tail-sweep				(the tail-sweep)
		
	)	
	





;W A R N I N G S'   o b	j e c t s:
	
	(WARNING-number-of-engines-must-be-2-3-or-4-overwritten-to-the-closest-value
	
			:type 'warning-type
	
			:hidden? (if (eql (the engine-warning-showing) 0)	; 0 -> hiding
						 
						 t		;true
						 nil	;false
					 )
	
			:display-controls (list :color :red)
	)

	(WARNING-tail-type-must-be-0-1-2-3-4-or-5-overwritten-to-the-closest-value
	
			:type 'warning-type
	
			:hidden? (if (eql (the tail-warning-showing) 0)	; 0 -> hiding
						 
						 t		;true
						 nil	;false
					 )
	
			:display-controls (list :color :red)
	)
	
	(WARNING-xfoil-spanwisely-must-be-between-0-and-1-overwritten_to_75_perc
	
			:type 'warning-type
	
			:hidden? (if (eql (the xfoil-spanwisely-warning-showing) 0)	; 0 -> hiding
						 
						 t		;true
						 nil	;false
					 )
	
			:display-controls (list :color :red)
	)
	
	(WARNING-altitude-formulas-do-not-hold-well-above-25000m-overwritten-to-10500m
	
			:type 'warning-type
	
			:hidden? (if (eql (the altitude-warning-showing) 0)	; 0 -> hiding
						 
						 t		;true
						 nil	;false
					 )
	
			:display-controls (list :color :red)
	)	
	
	(WARNING-viscous-calculations-for-Q3D-are-ON
	
			:type 'warning-type
	
			:hidden? (if (eql (the viscous-warning-showing) 0)	; 0 -> hiding
						 
						 t		;true
						 nil	;false
					 )
	
			:display-controls (list :color :green)
	)	

	(WARNING-divergence-angle-must-be-between-15-and-25-deg-overwritten-to-20-deg
	
			:type 'warning-type
	
			:hidden? (if (eql (the divergence-angle-warning-showing) 0)	; 0 -> hiding
						 
						 t		;true
						 nil	;false
					 )
	
			:display-controls (list :color :red)
	)

	(WARNING-rotation-angle-must-be-below-15-deg-overwritten-to-10-deg
	
			:type 'warning-type
	
			:hidden? (if (eql (the rotation_angle-init-warning-showing) 0)	; 0 -> hiding
						 
						 t		;true
						 nil	;false
					 )
	
			:display-controls (list :color :red)
	)	
	
	
	
; --- other warnings:	
	
	(WARNING-engine-diameter-inconsistent-with-fuselage-overwritten-to-40-perc-of-fuselage-diameter
	
			:type 'warning-type
	
			:hidden? (if (eql (the engine_diameter-init-warning-showing) 0)	; 0 -> hiding
						 
						 t		;true
						 nil	;false
					 )
	
			:display-controls (list :color :red)
	)	
	
	(WARNING-wing-dihedral-is-unconventional-overwritten-to-5-deg
	
			:type 'warning-type
	
			:hidden? (if (eql (the dihedral-init-warning-showing) 0)	; 0 -> hiding
						 
						 t		;true
						 nil	;false
					 )
	
			:display-controls (list :color :red)
	)
	
	(WARNING-nose-slenderness-is-unconventional-overwritten-to-1_5
	
			:type 'warning-type
	
			:hidden? (if (eql (the slenderness-ratio-nose-init-warning-showing) 0)	; 0 -> hiding
						 
						 t		;true
						 nil	;false
					 )
	
			:display-controls (list :color :red)
	)	
	
	(WARNING-wing-thickness-is-unconventional-overwritten-to-7_5-perc-of-c-root
	
			:type 'warning-type
	
			:hidden? (if (eql (the thickness-init-warning-showing) 0)	; 0 -> hiding
						 
						 t		;true
						 nil	;false
					 )
	
			:display-controls (list :color :red)
	)	
	
	(WARNING-wing-sweep-is-over-40-deg-be-careful
	
			:type 'warning-type
	
			:hidden? (if (eql (the sweep-warning-showing) 0)	; 0 -> hiding
						 
						 t		;true
						 nil	;false
					 )
	
			:display-controls (list :color :green)
	)	
	
	(WARNING-fuselage-slenderness-is-unconventional-overwritten-to-10
	
			:type 'warning-type
	
			:hidden? (if (eql (the slenderness_ratio_fuselage-warning-showing) 0)	; 0 -> hiding
						 
						 t		;true
						 nil	;false
					 )
	
			:display-controls (list :color :red)
	)	
	
	(WARNING-fuselage-diameter-is-unconventional-overwritten-to-3m
	
			:type 'warning-type
	
			:hidden? (if (eql (the fuselage_diameter-init-warning-showing) 0)	; 0 -> hiding
						 
						 t		;true
						 nil	;false
					 )
	
			:display-controls (list :color :red)
	)	

	(WARNING-engine-length-is-unconventional-overwritten-to-2-times-engine-diameter
	
			:type 'warning-type
	
			:hidden? (if (eql (the engine_length-init-warning-showing) 0)	; 0 -> hiding
						 
						 t		;true
						 nil	;false
					 )
	
			:display-controls (list :color :red)
	)	
	
	(WARNING-landing-gear-is-unconventional-overwritten-to-1_5m
	
			:type 'warning-type
	
			:hidden? (if (eql (the landing_gear_height-warning-showing) 0)	; 0 -> hiding
						 
						 t		;true
						 nil	;false
					 )
	
			:display-controls (list :color :red)
	)

	(WARNING-c-root-is-unconventional-overwritten-to-fuselage-length-over-4_5
	
			:type 'warning-type
	
			:hidden? (if (eql (the c-root-warning-showing) 0)	; 0 -> hiding
						 
						 t		;true
						 nil	;false
					 )
	
			:display-controls (list :color :red)
	)

	(WARNING-wing-span-is-unconventional-overwritten-to-fuselage-length-over-1_2
	
			:type 'warning-type
	
			:hidden? (if (eql (the wing-span-warning-showing) 0)	; 0 -> hiding
						 
						 t		;true
						 nil	;false
					 )
	
			:display-controls (list :color :red)
	)	
	
	(WARNING-wing-sweep-is-over-50-deg-overwritten-to-35-deg
	
			:type 'warning-type
	
			:hidden? (if (eql (the sweep-over-50-warning-showing) 0)	; 0 -> hiding
						 
						 t		;true
						 nil	;false
					 )
	
			:display-controls (list :color :red)
	)

	(WARNING-be-careful-with-rotation-angle-and-divergence-angle-adjust-fin-as-convenient
	
			:type 'warning-type
	
			:hidden? (if (eql (the fuselage-slendernessratio-over-12-or-below-8-warning-showing) 0)	; 0 -> hiding
						 
						 t		;true
						 nil	;false
					 )
	
			:display-controls (list :color :green)
	)	

	(WARNING-aft-cone-might-require-modifications-overwritten-to-12-if-fus-slend-is-less-than-10-or-to-8-if-more
	
			:type 'warning-type
	
			:hidden? (if (eql (the aft-cone-warning-showing) 0)	; 0 -> hiding
						 
						 t		;true
						 nil	;false
					 )
	
			:display-controls (list :color :red)
	)	

	(WARNING-Mach-number-is-one-there-might-be-division-by-zero-in-the-computations-section
	
			:type 'warning-type
	
			:hidden? (if (eql (the mach-one-warning-showing) 0)	; 0 -> hiding
						 
						 t		;true
						 nil	;false
					 )
	
			:display-controls (list :color :green)
	)		
	
	(WARNING-V-C-or-H-tail-cannot-have-3-engines-podded-overwritten-for-mounted-type
	
			:type 'warning-type
	
			:hidden? (if (eql (the 3-engines-warning-showing) 0)	; 0 -> hiding
						 
						 t		;true
						 nil	;false
					 )
	
			:display-controls (list :color :red)
	)	
	
	
	
;bracket closing objects
)

;bracket closing the airplane object
)